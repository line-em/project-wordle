/*
  Theme and global variables
*/
html {
    overflow-y: scroll;
    --sans: 'Rubik Variable', sans-serif;
    --game-spacing: 32px;
    --header-height: 4rem;

    --color-accent: hsl(11, 74%, 66%);
    --color-success: hsl(159, 79%, 27%);
    --color-warning: hsl(50, 89%, 36%);
    --color-error: hsl(0, 68%, 51%);
    --color-gray-100: hsl(0deg 0% 10%);
    --color-gray-300: hsl(0deg 0% 25%);
    --color-gray-500: hsl(0deg 0% 50%);
    --color-gray-700: hsl(0deg 0% 75%);
    --color-gray-800: hsl(0deg 0% 87%);
    --color-gray-900: hsl(0deg 0% 93%);
    background-color: var(--color-gray-900);

}

/*
  Custom styles
*/
body {
    font-family: var(--sans);
    font-weight: 500;
    line-height: 1.5;
}

@media (max-height: 600px) {
    body {
        --game-spacing: 8px;
    }
}

button {
    margin: 0;
    padding: 5px 7px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    background: var(--color-accent);
    color: white;
    text-align: center;
}

button.reset {
    display: flex;
    margin: 8px auto;
    background-color: var(--color-warning);
    color:var(--color-gray-100)
}

button:disabled {
    background: var(--color-gray-700);
    color: var(--color-gray-900);
}

.wrapper {
    display: flex;
    flex-direction: column;
    min-height: 100%;
}

.lang-wrapper {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

header {
    display: flex;
    height: var(--header-height);
    border-bottom: 1px solid var(--color-gray-700);
    color: white;
    background-color: var(--color-accent);
    justify-content: center;
    gap: 16px;
    align-items: center;
}

header .side {
    width: var(--header-height);
    display: grid;
    place-content: center;
}

h1 {
    font-size: 2rem;
    line-height: var(--header-height);
    text-align: center;
}

@media (max-width: 25rem) {
    h1 {
        font-size: 1.25rem;
    }
}

.game-wrapper {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: var(--game-spacing);
    padding: var(--game-spacing) 16px;
    margin: 0 auto;
    min-width: 250px;
    max-width: min(500px, 58vh, 100%);
}

@media screen and (min-width: 500px) {
    .game-wrapper {
        min-width: 500px;
        padding: var(--game-spacing) 32px;
    }
}

.guess-results {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    border-radius: 8px;
}

.guess {
    display: flex;
    gap: 4px;
    margin-bottom: 4px;
}

.cell {
    position: relative;
    width: 20%;
    display: grid;
    place-content: center;
    aspect-ratio: 1 / 1;
    border: 2px solid var(--color-gray-700);
    border-radius: var(--radius);
    font-size: 2rem;
    background-color: #f3f3f3;
    /*min-width: 52px;*/
}

/*
  Round the corners for the 4 cells at the very corners of
  the game board
*/
.guess:first-of-type .cell:first-of-type {
    --radius: 4px 0px 0px 0px;
}

.guess:first-of-type .cell:last-of-type {
    --radius: 0px 4px 0px 0px;
}

.guess:last-of-type .cell:last-of-type {
    --radius: 0px 0px 4px 0px;
}

.guess:last-of-type .cell:first-of-type {
    --radius: 0px 0px 0px 4px;
}

.cell.correct {
    background: var(--color-success);
    border-color: var(--color-success);
    color: white;
}

.cell.incorrect {
    background: var(--color-gray-300);
    border-color: var(--color-gray-300);
    color: white;
}

.cell.misplaced {
    background: var(--color-warning);
    border-color: var(--color-warning);
    color: white;
}

.guess-input-wrapper {
    display: grid;
    grid-template-columns: 1fr;
    gap: 8px;
}

.guess-input-wrapper label {
    font-size: 1.1rem;
}

@media screen and (min-width: 350px) {
    .guess-input-wrapper {
        grid-template-columns: 1fr 70px;
    }

    .guess-input-wrapper label {
        grid-column: span 2;
    }
}

.guess-input-wrapper input {
    display: block;
    width: 100%;
    font-size: 2rem;
    border: 2px solid var(--color-gray-700);
    border-radius: 4px;
    padding: 8px 16px;
    outline-offset: 2px;
    background-color: #f3f3f3;
}

.banner {
    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
    padding: 32px;
    text-align: center;
    animation: slideUp 750ms cubic-bezier(0, 0.72, 0.24, 1.02);
    border-radius: 4px 4px 0px 0px;
    will-change: transform;
}

.happy.banner {
    background: var(--color-success);
    color: white;
}

.sad.banner {
    background: var(--color-error);
    color: white;
}



.visually-hidden {
    position: absolute;
    overflow: hidden;
    clip: rect(0 0 0 0);
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
}

/*
  Modal styles

  HACK: I'm doing this in a quick and dirty way.
  Later in the course, we'll see my preferred way of building
  modals in React.
*/
[data-reach-dialog-content] {
    position: relative;
    border-radius: 8px;
    padding: 24px 32px;
}

.modal-close-btn {
    position: absolute;
    top: 0;
    right: 0;
    padding: 16px;
    cursor: pointer;
}

.modal-title {
    margin-bottom: 0.5em;
}

/*
  Keyframe animations
*/
@keyframes slideUp {
    from {
        transform: translateY(100%);
    }
    to {
        transform: translateY(0%);
    }
}
